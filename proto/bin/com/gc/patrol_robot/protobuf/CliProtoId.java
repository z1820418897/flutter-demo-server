// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_proto_id.proto

package com.gc.patrol_robot.protobuf;

public final class CliProtoId {
  private CliProtoId() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * MSG_CLI_REGISTER_REQ  = 3000;  //玩家注册
   * MSG_CLI_REGISTER_RSP = 3001;  
   * </pre>
   *
   * Protobuf enum {@code ClientProtocols.ClientProtoId}
   */
  public enum ClientProtoId
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *用户相关协议
     * </pre>
     *
     * <code>MSG_CLI_LOGIN_REQ = 3000;</code>
     */
    MSG_CLI_LOGIN_REQ(3000),
    /**
     * <pre>
     * </pre>
     *
     * <code>MSG_CLI_LOGIN_RSP = 3001;</code>
     */
    MSG_CLI_LOGIN_RSP(3001),
    /**
     * <pre>
     *修改用户信息,用户名，密码等
     * </pre>
     *
     * <code>MSG_CLI_CHANGE_USER_INFO_REQ = 3002;</code>
     */
    MSG_CLI_CHANGE_USER_INFO_REQ(3002),
    /**
     * <pre>
     * </pre>
     *
     * <code>MSG_CLI_CHANGE_USER_INFO_RSP = 3003;</code>
     */
    MSG_CLI_CHANGE_USER_INFO_RSP(3003),
    /**
     * <pre>
     *添加其它账号
     * </pre>
     *
     * <code>MSG_CLI_ADD_USER_REQ = 3004;</code>
     */
    MSG_CLI_ADD_USER_REQ(3004),
    /**
     * <pre>
     * </pre>
     *
     * <code>MSG_CLI_ADD_USER_RSP = 3005;</code>
     */
    MSG_CLI_ADD_USER_RSP(3005),
    /**
     * <pre>
     *删除其它账号
     * </pre>
     *
     * <code>MSG_CLI_DEL_USER_REQ = 3006;</code>
     */
    MSG_CLI_DEL_USER_REQ(3006),
    /**
     * <pre>
     * </pre>
     *
     * <code>MSG_CLI_DEL_USER_RSP = 3007;</code>
     */
    MSG_CLI_DEL_USER_RSP(3007),
    /**
     * <pre>
     *进入服务器
     * </pre>
     *
     * <code>MSG_CLI_ENTER_SERVER_REQ = 3008;</code>
     */
    MSG_CLI_ENTER_SERVER_REQ(3008),
    /**
     * <pre>
     * </pre>
     *
     * <code>MSG_CLI_ENTER_SERVER_RSP = 3009;</code>
     */
    MSG_CLI_ENTER_SERVER_RSP(3009),
    /**
     * <pre>
     *管理员给用户赋权限
     * </pre>
     *
     * <code>MSG_CLI_ASSIGN_RIGHT_REQ = 3010;</code>
     */
    MSG_CLI_ASSIGN_RIGHT_REQ(3010),
    /**
     * <pre>
     *管理员给用户赋权限
     * </pre>
     *
     * <code>MSG_CLI_ASSIGN_RIGHT_RSP = 3011;</code>
     */
    MSG_CLI_ASSIGN_RIGHT_RSP(3011),
    /**
     * <pre>
     * 获取当前用户拥有的设备列表
     * </pre>
     *
     * <code>MSG_CLI_GET_DC_LIST_REQ = 3012;</code>
     */
    MSG_CLI_GET_DC_LIST_REQ(3012),
    /**
     * <pre>
     * </pre>
     *
     * <code>MSG_CLI_GET_DC_LIST_RSP = 3013;</code>
     */
    MSG_CLI_GET_DC_LIST_RSP(3013),
    /**
     * <pre>
     *心跳
     * </pre>
     *
     * <code>MSG_CLI_HEART_BEAT_REQ = 3014;</code>
     */
    MSG_CLI_HEART_BEAT_REQ(3014),
    /**
     * <pre>
     *获取设备所在多媒体server地址
     * </pre>
     *
     * <code>MSG_GET_DC_MEDIA_SERVER_ADDR_REQ = 3015;</code>
     */
    MSG_GET_DC_MEDIA_SERVER_ADDR_REQ(3015),
    /**
     * <pre>
     * </pre>
     *
     * <code>MSG_GET_DC_MEDIA_SERVER_ADDR_RSP = 3016;</code>
     */
    MSG_GET_DC_MEDIA_SERVER_ADDR_RSP(3016),
    /**
     * <pre>
     *服务器主动下发的消息
     * </pre>
     *
     * <code>MSG_CLI_INFO_NTF = 3017;</code>
     */
    MSG_CLI_INFO_NTF(3017),
    /**
     * <pre>
     *获取当前用户可见的用户列表
     * </pre>
     *
     * <code>MSG_CLI_GET_VISIBLE_USER_LIST_REQ = 3018;</code>
     */
    MSG_CLI_GET_VISIBLE_USER_LIST_REQ(3018),
    /**
     * <pre>
     * </pre>
     *
     * <code>MSG_CLI_GET_VISIBLE_USER_LIST_RSP = 3019;</code>
     */
    MSG_CLI_GET_VISIBLE_USER_LIST_RSP(3019),
    /**
     * <pre>
     *获取http地址 
     * </pre>
     *
     * <code>MSG_CLI_GET_HTTP_ADDR_REQ = 3020;</code>
     */
    MSG_CLI_GET_HTTP_ADDR_REQ(3020),
    /**
     * <pre>
     * 
     * </pre>
     *
     * <code>MSG_CLI_GET_HTTP_ADDR_RSP = 3021;</code>
     */
    MSG_CLI_GET_HTTP_ADDR_RSP(3021),
    /**
     * <pre>
     *--------------------巡检点类型相关协议------------------------------------
     *巡检点类型操作
     * </pre>
     *
     * <code>MSG_CLI_PATROL_PT_TYPE_OP_REQ = 3022;</code>
     */
    MSG_CLI_PATROL_PT_TYPE_OP_REQ(3022),
    /**
     * <pre>
     *消息体同 CommonProtocols.DT_PATROL_PT_TYPE_NTF
     * </pre>
     *
     * <code>MSG_CLI_PATROL_PT_TYPE_NTF = 3023;</code>
     */
    MSG_CLI_PATROL_PT_TYPE_NTF(3023),
    /**
     * <pre>
     *获取巡检点类型列表
     * </pre>
     *
     * <code>MSG_CLI_GET_PATROL_PT_TYPE_LIST_REQ = 3024;</code>
     */
    MSG_CLI_GET_PATROL_PT_TYPE_LIST_REQ(3024),
    /**
     * <code>MSG_CLI_GET_PATROL_PT_TYPE_LIST_RSP = 3025;</code>
     */
    MSG_CLI_GET_PATROL_PT_TYPE_LIST_RSP(3025),
    /**
     * <pre>
     *--------------------巡检点相关协议---------------------------------------
     *巡检点增删改
     * </pre>
     *
     * <code>MSG_CLI_PATROL_PT_OP_REQ = 3026;</code>
     */
    MSG_CLI_PATROL_PT_OP_REQ(3026),
    /**
     * <pre>
     *消息体同 CommonProtocols.DT_PATROL_PT_NTF
     * </pre>
     *
     * <code>MSG_CLI_PATROL_PT_NTF = 3027;</code>
     */
    MSG_CLI_PATROL_PT_NTF(3027),
    /**
     * <pre>
     *后去巡检点列表
     * </pre>
     *
     * <code>MSG_CLI_GET_PATROL_PT_LIST_REQ = 3028;</code>
     */
    MSG_CLI_GET_PATROL_PT_LIST_REQ(3028),
    /**
     * <code>MSG_CLI_GET_PATROL_PT_LIST_RSP = 3029;</code>
     */
    MSG_CLI_GET_PATROL_PT_LIST_RSP(3029),
    /**
     * <pre>
     *-----------------------巡检任务相关协议---------------------
     * </pre>
     *
     * <code>MSG_CLI_GET_TASK_LIST_REQ = 3030;</code>
     */
    MSG_CLI_GET_TASK_LIST_REQ(3030),
    /**
     * <code>MSG_CLI_GET_TASK_LIST_RSP = 3031;</code>
     */
    MSG_CLI_GET_TASK_LIST_RSP(3031),
    /**
     * <code>MSG_CLI_TASK_OP_REQ = 3032;</code>
     */
    MSG_CLI_TASK_OP_REQ(3032),
    /**
     * <pre>
     *消息体同 CommonProtocols.DT_TASK_NTF
     * </pre>
     *
     * <code>MSG_CLI_TASK_NTF = 3033;</code>
     */
    MSG_CLI_TASK_NTF(3033),
    /**
     * <pre>
     *------自动模式还是手动控制模式
     * </pre>
     *
     * <code>MSG_CLI_DEVICE_CONTROL_MODE_REQ = 3034;</code>
     */
    MSG_CLI_DEVICE_CONTROL_MODE_REQ(3034),
    /**
     * <pre>
     *不需要回复，只需要发控制指令即可
     * </pre>
     *
     * <code>MSG_CLI_DC_CTL_OP_REQ = 3035;</code>
     */
    MSG_CLI_DC_CTL_OP_REQ(3035),
    /**
     * <pre>
     *请求构建地图开始或者结束的请求, CommonProtocols.DT_MAP_CONSTRUCT_NTF
     * </pre>
     *
     * <code>MSG_CLI_CONSTRUCT_MAP_REQ = 3036;</code>
     */
    MSG_CLI_CONSTRUCT_MAP_REQ(3036),
    /**
     * <pre>
     *设置设备当前的工作地图,消息同CommonProtocols.DT_DC_CURR_MAP 
     * </pre>
     *
     * <code>MSG_CLI_SET_DC_CURR_MAP_REQ = 3037;</code>
     */
    MSG_CLI_SET_DC_CURR_MAP_REQ(3037),
    /**
     * <pre>
     *--- 场景模式 
     * </pre>
     *
     * <code>MSG_CLI_SET_DC_SCENE_MODE_REQ = 3038;</code>
     */
    MSG_CLI_SET_DC_SCENE_MODE_REQ(3038),
    /**
     * <pre>
     *检测点结果通知
     * </pre>
     *
     * <code>MSG_CLI_PT_RESULT_NTF = 3039;</code>
     */
    MSG_CLI_PT_RESULT_NTF(3039),
    /**
     * <pre>
     *处理巡检结果
     * </pre>
     *
     * <code>MSG_CLI_PROCESS_PATROL_RESULT_REQ = 3040;</code>
     */
    MSG_CLI_PROCESS_PATROL_RESULT_REQ(3040),
    ;

    /**
     * <pre>
     *用户相关协议
     * </pre>
     *
     * <code>MSG_CLI_LOGIN_REQ = 3000;</code>
     */
    public static final int MSG_CLI_LOGIN_REQ_VALUE = 3000;
    /**
     * <pre>
     * </pre>
     *
     * <code>MSG_CLI_LOGIN_RSP = 3001;</code>
     */
    public static final int MSG_CLI_LOGIN_RSP_VALUE = 3001;
    /**
     * <pre>
     *修改用户信息,用户名，密码等
     * </pre>
     *
     * <code>MSG_CLI_CHANGE_USER_INFO_REQ = 3002;</code>
     */
    public static final int MSG_CLI_CHANGE_USER_INFO_REQ_VALUE = 3002;
    /**
     * <pre>
     * </pre>
     *
     * <code>MSG_CLI_CHANGE_USER_INFO_RSP = 3003;</code>
     */
    public static final int MSG_CLI_CHANGE_USER_INFO_RSP_VALUE = 3003;
    /**
     * <pre>
     *添加其它账号
     * </pre>
     *
     * <code>MSG_CLI_ADD_USER_REQ = 3004;</code>
     */
    public static final int MSG_CLI_ADD_USER_REQ_VALUE = 3004;
    /**
     * <pre>
     * </pre>
     *
     * <code>MSG_CLI_ADD_USER_RSP = 3005;</code>
     */
    public static final int MSG_CLI_ADD_USER_RSP_VALUE = 3005;
    /**
     * <pre>
     *删除其它账号
     * </pre>
     *
     * <code>MSG_CLI_DEL_USER_REQ = 3006;</code>
     */
    public static final int MSG_CLI_DEL_USER_REQ_VALUE = 3006;
    /**
     * <pre>
     * </pre>
     *
     * <code>MSG_CLI_DEL_USER_RSP = 3007;</code>
     */
    public static final int MSG_CLI_DEL_USER_RSP_VALUE = 3007;
    /**
     * <pre>
     *进入服务器
     * </pre>
     *
     * <code>MSG_CLI_ENTER_SERVER_REQ = 3008;</code>
     */
    public static final int MSG_CLI_ENTER_SERVER_REQ_VALUE = 3008;
    /**
     * <pre>
     * </pre>
     *
     * <code>MSG_CLI_ENTER_SERVER_RSP = 3009;</code>
     */
    public static final int MSG_CLI_ENTER_SERVER_RSP_VALUE = 3009;
    /**
     * <pre>
     *管理员给用户赋权限
     * </pre>
     *
     * <code>MSG_CLI_ASSIGN_RIGHT_REQ = 3010;</code>
     */
    public static final int MSG_CLI_ASSIGN_RIGHT_REQ_VALUE = 3010;
    /**
     * <pre>
     *管理员给用户赋权限
     * </pre>
     *
     * <code>MSG_CLI_ASSIGN_RIGHT_RSP = 3011;</code>
     */
    public static final int MSG_CLI_ASSIGN_RIGHT_RSP_VALUE = 3011;
    /**
     * <pre>
     * 获取当前用户拥有的设备列表
     * </pre>
     *
     * <code>MSG_CLI_GET_DC_LIST_REQ = 3012;</code>
     */
    public static final int MSG_CLI_GET_DC_LIST_REQ_VALUE = 3012;
    /**
     * <pre>
     * </pre>
     *
     * <code>MSG_CLI_GET_DC_LIST_RSP = 3013;</code>
     */
    public static final int MSG_CLI_GET_DC_LIST_RSP_VALUE = 3013;
    /**
     * <pre>
     *心跳
     * </pre>
     *
     * <code>MSG_CLI_HEART_BEAT_REQ = 3014;</code>
     */
    public static final int MSG_CLI_HEART_BEAT_REQ_VALUE = 3014;
    /**
     * <pre>
     *获取设备所在多媒体server地址
     * </pre>
     *
     * <code>MSG_GET_DC_MEDIA_SERVER_ADDR_REQ = 3015;</code>
     */
    public static final int MSG_GET_DC_MEDIA_SERVER_ADDR_REQ_VALUE = 3015;
    /**
     * <pre>
     * </pre>
     *
     * <code>MSG_GET_DC_MEDIA_SERVER_ADDR_RSP = 3016;</code>
     */
    public static final int MSG_GET_DC_MEDIA_SERVER_ADDR_RSP_VALUE = 3016;
    /**
     * <pre>
     *服务器主动下发的消息
     * </pre>
     *
     * <code>MSG_CLI_INFO_NTF = 3017;</code>
     */
    public static final int MSG_CLI_INFO_NTF_VALUE = 3017;
    /**
     * <pre>
     *获取当前用户可见的用户列表
     * </pre>
     *
     * <code>MSG_CLI_GET_VISIBLE_USER_LIST_REQ = 3018;</code>
     */
    public static final int MSG_CLI_GET_VISIBLE_USER_LIST_REQ_VALUE = 3018;
    /**
     * <pre>
     * </pre>
     *
     * <code>MSG_CLI_GET_VISIBLE_USER_LIST_RSP = 3019;</code>
     */
    public static final int MSG_CLI_GET_VISIBLE_USER_LIST_RSP_VALUE = 3019;
    /**
     * <pre>
     *获取http地址 
     * </pre>
     *
     * <code>MSG_CLI_GET_HTTP_ADDR_REQ = 3020;</code>
     */
    public static final int MSG_CLI_GET_HTTP_ADDR_REQ_VALUE = 3020;
    /**
     * <pre>
     * 
     * </pre>
     *
     * <code>MSG_CLI_GET_HTTP_ADDR_RSP = 3021;</code>
     */
    public static final int MSG_CLI_GET_HTTP_ADDR_RSP_VALUE = 3021;
    /**
     * <pre>
     *--------------------巡检点类型相关协议------------------------------------
     *巡检点类型操作
     * </pre>
     *
     * <code>MSG_CLI_PATROL_PT_TYPE_OP_REQ = 3022;</code>
     */
    public static final int MSG_CLI_PATROL_PT_TYPE_OP_REQ_VALUE = 3022;
    /**
     * <pre>
     *消息体同 CommonProtocols.DT_PATROL_PT_TYPE_NTF
     * </pre>
     *
     * <code>MSG_CLI_PATROL_PT_TYPE_NTF = 3023;</code>
     */
    public static final int MSG_CLI_PATROL_PT_TYPE_NTF_VALUE = 3023;
    /**
     * <pre>
     *获取巡检点类型列表
     * </pre>
     *
     * <code>MSG_CLI_GET_PATROL_PT_TYPE_LIST_REQ = 3024;</code>
     */
    public static final int MSG_CLI_GET_PATROL_PT_TYPE_LIST_REQ_VALUE = 3024;
    /**
     * <code>MSG_CLI_GET_PATROL_PT_TYPE_LIST_RSP = 3025;</code>
     */
    public static final int MSG_CLI_GET_PATROL_PT_TYPE_LIST_RSP_VALUE = 3025;
    /**
     * <pre>
     *--------------------巡检点相关协议---------------------------------------
     *巡检点增删改
     * </pre>
     *
     * <code>MSG_CLI_PATROL_PT_OP_REQ = 3026;</code>
     */
    public static final int MSG_CLI_PATROL_PT_OP_REQ_VALUE = 3026;
    /**
     * <pre>
     *消息体同 CommonProtocols.DT_PATROL_PT_NTF
     * </pre>
     *
     * <code>MSG_CLI_PATROL_PT_NTF = 3027;</code>
     */
    public static final int MSG_CLI_PATROL_PT_NTF_VALUE = 3027;
    /**
     * <pre>
     *后去巡检点列表
     * </pre>
     *
     * <code>MSG_CLI_GET_PATROL_PT_LIST_REQ = 3028;</code>
     */
    public static final int MSG_CLI_GET_PATROL_PT_LIST_REQ_VALUE = 3028;
    /**
     * <code>MSG_CLI_GET_PATROL_PT_LIST_RSP = 3029;</code>
     */
    public static final int MSG_CLI_GET_PATROL_PT_LIST_RSP_VALUE = 3029;
    /**
     * <pre>
     *-----------------------巡检任务相关协议---------------------
     * </pre>
     *
     * <code>MSG_CLI_GET_TASK_LIST_REQ = 3030;</code>
     */
    public static final int MSG_CLI_GET_TASK_LIST_REQ_VALUE = 3030;
    /**
     * <code>MSG_CLI_GET_TASK_LIST_RSP = 3031;</code>
     */
    public static final int MSG_CLI_GET_TASK_LIST_RSP_VALUE = 3031;
    /**
     * <code>MSG_CLI_TASK_OP_REQ = 3032;</code>
     */
    public static final int MSG_CLI_TASK_OP_REQ_VALUE = 3032;
    /**
     * <pre>
     *消息体同 CommonProtocols.DT_TASK_NTF
     * </pre>
     *
     * <code>MSG_CLI_TASK_NTF = 3033;</code>
     */
    public static final int MSG_CLI_TASK_NTF_VALUE = 3033;
    /**
     * <pre>
     *------自动模式还是手动控制模式
     * </pre>
     *
     * <code>MSG_CLI_DEVICE_CONTROL_MODE_REQ = 3034;</code>
     */
    public static final int MSG_CLI_DEVICE_CONTROL_MODE_REQ_VALUE = 3034;
    /**
     * <pre>
     *不需要回复，只需要发控制指令即可
     * </pre>
     *
     * <code>MSG_CLI_DC_CTL_OP_REQ = 3035;</code>
     */
    public static final int MSG_CLI_DC_CTL_OP_REQ_VALUE = 3035;
    /**
     * <pre>
     *请求构建地图开始或者结束的请求, CommonProtocols.DT_MAP_CONSTRUCT_NTF
     * </pre>
     *
     * <code>MSG_CLI_CONSTRUCT_MAP_REQ = 3036;</code>
     */
    public static final int MSG_CLI_CONSTRUCT_MAP_REQ_VALUE = 3036;
    /**
     * <pre>
     *设置设备当前的工作地图,消息同CommonProtocols.DT_DC_CURR_MAP 
     * </pre>
     *
     * <code>MSG_CLI_SET_DC_CURR_MAP_REQ = 3037;</code>
     */
    public static final int MSG_CLI_SET_DC_CURR_MAP_REQ_VALUE = 3037;
    /**
     * <pre>
     *--- 场景模式 
     * </pre>
     *
     * <code>MSG_CLI_SET_DC_SCENE_MODE_REQ = 3038;</code>
     */
    public static final int MSG_CLI_SET_DC_SCENE_MODE_REQ_VALUE = 3038;
    /**
     * <pre>
     *检测点结果通知
     * </pre>
     *
     * <code>MSG_CLI_PT_RESULT_NTF = 3039;</code>
     */
    public static final int MSG_CLI_PT_RESULT_NTF_VALUE = 3039;
    /**
     * <pre>
     *处理巡检结果
     * </pre>
     *
     * <code>MSG_CLI_PROCESS_PATROL_RESULT_REQ = 3040;</code>
     */
    public static final int MSG_CLI_PROCESS_PATROL_RESULT_REQ_VALUE = 3040;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ClientProtoId valueOf(int value) {
      return forNumber(value);
    }

    public static ClientProtoId forNumber(int value) {
      switch (value) {
        case 3000: return MSG_CLI_LOGIN_REQ;
        case 3001: return MSG_CLI_LOGIN_RSP;
        case 3002: return MSG_CLI_CHANGE_USER_INFO_REQ;
        case 3003: return MSG_CLI_CHANGE_USER_INFO_RSP;
        case 3004: return MSG_CLI_ADD_USER_REQ;
        case 3005: return MSG_CLI_ADD_USER_RSP;
        case 3006: return MSG_CLI_DEL_USER_REQ;
        case 3007: return MSG_CLI_DEL_USER_RSP;
        case 3008: return MSG_CLI_ENTER_SERVER_REQ;
        case 3009: return MSG_CLI_ENTER_SERVER_RSP;
        case 3010: return MSG_CLI_ASSIGN_RIGHT_REQ;
        case 3011: return MSG_CLI_ASSIGN_RIGHT_RSP;
        case 3012: return MSG_CLI_GET_DC_LIST_REQ;
        case 3013: return MSG_CLI_GET_DC_LIST_RSP;
        case 3014: return MSG_CLI_HEART_BEAT_REQ;
        case 3015: return MSG_GET_DC_MEDIA_SERVER_ADDR_REQ;
        case 3016: return MSG_GET_DC_MEDIA_SERVER_ADDR_RSP;
        case 3017: return MSG_CLI_INFO_NTF;
        case 3018: return MSG_CLI_GET_VISIBLE_USER_LIST_REQ;
        case 3019: return MSG_CLI_GET_VISIBLE_USER_LIST_RSP;
        case 3020: return MSG_CLI_GET_HTTP_ADDR_REQ;
        case 3021: return MSG_CLI_GET_HTTP_ADDR_RSP;
        case 3022: return MSG_CLI_PATROL_PT_TYPE_OP_REQ;
        case 3023: return MSG_CLI_PATROL_PT_TYPE_NTF;
        case 3024: return MSG_CLI_GET_PATROL_PT_TYPE_LIST_REQ;
        case 3025: return MSG_CLI_GET_PATROL_PT_TYPE_LIST_RSP;
        case 3026: return MSG_CLI_PATROL_PT_OP_REQ;
        case 3027: return MSG_CLI_PATROL_PT_NTF;
        case 3028: return MSG_CLI_GET_PATROL_PT_LIST_REQ;
        case 3029: return MSG_CLI_GET_PATROL_PT_LIST_RSP;
        case 3030: return MSG_CLI_GET_TASK_LIST_REQ;
        case 3031: return MSG_CLI_GET_TASK_LIST_RSP;
        case 3032: return MSG_CLI_TASK_OP_REQ;
        case 3033: return MSG_CLI_TASK_NTF;
        case 3034: return MSG_CLI_DEVICE_CONTROL_MODE_REQ;
        case 3035: return MSG_CLI_DC_CTL_OP_REQ;
        case 3036: return MSG_CLI_CONSTRUCT_MAP_REQ;
        case 3037: return MSG_CLI_SET_DC_CURR_MAP_REQ;
        case 3038: return MSG_CLI_SET_DC_SCENE_MODE_REQ;
        case 3039: return MSG_CLI_PT_RESULT_NTF;
        case 3040: return MSG_CLI_PROCESS_PATROL_RESULT_REQ;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ClientProtoId>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ClientProtoId> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ClientProtoId>() {
            public ClientProtoId findValueByNumber(int number) {
              return ClientProtoId.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.gc.patrol_robot.protobuf.CliProtoId.getDescriptor().getEnumTypes().get(0);
    }

    private static final ClientProtoId[] VALUES = values();

    public static ClientProtoId valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ClientProtoId(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ClientProtocols.ClientProtoId)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025client_proto_id.proto\022\017ClientProtocols" +
      "*\266\n\n\rClientProtoId\022\026\n\021MSG_CLI_LOGIN_REQ\020" +
      "\270\027\022\026\n\021MSG_CLI_LOGIN_RSP\020\271\027\022!\n\034MSG_CLI_CH" +
      "ANGE_USER_INFO_REQ\020\272\027\022!\n\034MSG_CLI_CHANGE_" +
      "USER_INFO_RSP\020\273\027\022\031\n\024MSG_CLI_ADD_USER_REQ" +
      "\020\274\027\022\031\n\024MSG_CLI_ADD_USER_RSP\020\275\027\022\031\n\024MSG_CL" +
      "I_DEL_USER_REQ\020\276\027\022\031\n\024MSG_CLI_DEL_USER_RS" +
      "P\020\277\027\022\035\n\030MSG_CLI_ENTER_SERVER_REQ\020\300\027\022\035\n\030M" +
      "SG_CLI_ENTER_SERVER_RSP\020\301\027\022\035\n\030MSG_CLI_AS" +
      "SIGN_RIGHT_REQ\020\302\027\022\035\n\030MSG_CLI_ASSIGN_RIGH" +
      "T_RSP\020\303\027\022\034\n\027MSG_CLI_GET_DC_LIST_REQ\020\304\027\022\034" +
      "\n\027MSG_CLI_GET_DC_LIST_RSP\020\305\027\022\033\n\026MSG_CLI_" +
      "HEART_BEAT_REQ\020\306\027\022%\n MSG_GET_DC_MEDIA_SE" +
      "RVER_ADDR_REQ\020\307\027\022%\n MSG_GET_DC_MEDIA_SER" +
      "VER_ADDR_RSP\020\310\027\022\025\n\020MSG_CLI_INFO_NTF\020\311\027\022&" +
      "\n!MSG_CLI_GET_VISIBLE_USER_LIST_REQ\020\312\027\022&" +
      "\n!MSG_CLI_GET_VISIBLE_USER_LIST_RSP\020\313\027\022\036" +
      "\n\031MSG_CLI_GET_HTTP_ADDR_REQ\020\314\027\022\036\n\031MSG_CL" +
      "I_GET_HTTP_ADDR_RSP\020\315\027\022\"\n\035MSG_CLI_PATROL" +
      "_PT_TYPE_OP_REQ\020\316\027\022\037\n\032MSG_CLI_PATROL_PT_" +
      "TYPE_NTF\020\317\027\022(\n#MSG_CLI_GET_PATROL_PT_TYP" +
      "E_LIST_REQ\020\320\027\022(\n#MSG_CLI_GET_PATROL_PT_T" +
      "YPE_LIST_RSP\020\321\027\022\035\n\030MSG_CLI_PATROL_PT_OP_" +
      "REQ\020\322\027\022\032\n\025MSG_CLI_PATROL_PT_NTF\020\323\027\022#\n\036MS" +
      "G_CLI_GET_PATROL_PT_LIST_REQ\020\324\027\022#\n\036MSG_C" +
      "LI_GET_PATROL_PT_LIST_RSP\020\325\027\022\036\n\031MSG_CLI_" +
      "GET_TASK_LIST_REQ\020\326\027\022\036\n\031MSG_CLI_GET_TASK" +
      "_LIST_RSP\020\327\027\022\030\n\023MSG_CLI_TASK_OP_REQ\020\330\027\022\025" +
      "\n\020MSG_CLI_TASK_NTF\020\331\027\022$\n\037MSG_CLI_DEVICE_" +
      "CONTROL_MODE_REQ\020\332\027\022\032\n\025MSG_CLI_DC_CTL_OP" +
      "_REQ\020\333\027\022\036\n\031MSG_CLI_CONSTRUCT_MAP_REQ\020\334\027\022" +
      " \n\033MSG_CLI_SET_DC_CURR_MAP_REQ\020\335\027\022\"\n\035MSG" +
      "_CLI_SET_DC_SCENE_MODE_REQ\020\336\027\022\032\n\025MSG_CLI" +
      "_PT_RESULT_NTF\020\337\027\022&\n!MSG_CLI_PROCESS_PAT" +
      "ROL_RESULT_REQ\020\340\027B*\n\034com.gc.patrol_robot" +
      ".protobufB\nCliProtoId"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
